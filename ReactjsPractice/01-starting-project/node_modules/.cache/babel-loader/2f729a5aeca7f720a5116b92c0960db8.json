{"ast":null,"code":"var _jsxFileName = \"D:\\\\LearnReactJS\\\\ReactjsPractice\\\\01-starting-project\\\\src\\\\Context\\\\ContextCartProvice.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ContextCart from \"./ContextCart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContextCartProvice = props => {\n  _s();\n\n  const [items, setItem] = useState([]); //viết hàm tìm trong giỏ hàng có sản phẩm chưa\n\n  const findItem = id => {\n    return items.findIndex(item => item.id === id);\n  };\n\n  const addItem = item => {\n    setItem(preItem => {\n      console.log(items);\n\n      if (findItem(item.id) < 0) {\n        preItem.push(item);\n        return [...preItem];\n      } else {\n        preItem[findItem(item.id)].amount = preItem[findItem(item.id)].amount + item.amount;\n        return [...preItem];\n      }\n    });\n  }; //tính tổng tiền\n\n\n  let totalAmount = +0;\n\n  for (let i = 0; i < items.length; i++) {\n    let tong = items[i].amount * items[i].price;\n    totalAmount = tong;\n  } //remove\n\n\n  const removeItem = itemID => {\n    setItem(preItem => {\n      preItem[findItem(itemID)].amount -= 1;\n\n      if (preItem[findItem(itemID)].amount === 0) {\n        preItem = preItem.filter(item => {\n          return item.id !== preItem[findItem(itemID)].id;\n        });\n      }\n\n      return [...preItem];\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ContextCart.Provider, {\n    value: {\n      items: items,\n      totalAmount: totalAmount,\n      addItem: addItem,\n      removeItem: removeItem\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextCartProvice, \"KRrT0pR72GWhNOB1hlXzgG82wXs=\");\n\n_c = ContextCartProvice;\nexport default ContextCartProvice; ///cách này dùng reducer\n// import { useReducer } from \"react\";\n// import ContextCart from \"./ContextCart\";\n// const defaultCartState = {\n//   items: [],\n//   totalAmount: 0,\n// };\n// const cartReducer = (state, action) => {\n//   if (action.type === \"ADD\") {\n//     const updatedTotalAmount =\n//       state.totalAmount + action.item.price * action.item.amount;\n//     const existingCartItemIndex = state.items.findIndex(\n//       (item) => item.id === action.item.id,\n//     );\n//     const existingCartItem = state.items[existingCartItemIndex];\n//     let updatedItems;\n//     if (existingCartItem) {\n//       const updatedItem = {\n//         ...existingCartItem,\n//         amount: existingCartItem.amount + action.item.amount,\n//       };\n//       updatedItems = [...state.items];\n//       updatedItems[existingCartItemIndex] = updatedItem;\n//     } else {\n//       updatedItems = state.items.concat(action.item);\n//     }\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount,\n//     };\n//   }\n//   if (action.type === \"REMOVE\") {\n//     const existingCartItemIndex = state.items.findIndex(\n//       (item) => item.id === action.id,\n//     );\n//     const existingItem = state.items[existingCartItemIndex];\n//     const updatedTotalAmount = state.totalAmount - existingItem.price;\n//     let updatedItems;\n//     if (existingItem.amount === 1) {\n//       updatedItems = state.items.filter((item) => item.id !== action.id);\n//     } else {\n//       const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n//       updatedItems = [...state.items];\n//       updatedItems[existingCartItemIndex] = updatedItem;\n//     }\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount,\n//     };\n//   }\n//   return defaultCartState;\n// };\n// const CartProvider = (props) => {\n//   const [cartState, dispatchCartAction] = useReducer(\n//     cartReducer,\n//     defaultCartState,\n//   );\n//   const addItemToCartHandler = (item) => {\n//     dispatchCartAction({ type: \"ADD\", item: item });\n//   };\n//   const removeItemFromCartHandler = (id) => {\n//     dispatchCartAction({ type: \"REMOVE\", id: id });\n//   };\n//   const cartContext = {\n//     items: cartState.items,\n//     totalAmount: cartState.totalAmount,\n//     addItem: addItemToCartHandler,\n//     removeItem: removeItemFromCartHandler,\n//   };\n//   return (\n//     <ContextCart.Provider value={cartContext}>\n//       {props.children}\n//     </ContextCart.Provider>\n//   );\n// };\n// export default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextCartProvice\");","map":{"version":3,"sources":["D:/LearnReactJS/ReactjsPractice/01-starting-project/src/Context/ContextCartProvice.js"],"names":["React","useState","ContextCart","ContextCartProvice","props","items","setItem","findItem","id","findIndex","item","addItem","preItem","console","log","push","amount","totalAmount","i","length","tong","price","removeItem","itemID","filter","children"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport ContextCart from \"./ContextCart\";\r\n\r\nconst ContextCartProvice = (props) => {\r\n  const [items, setItem] = useState([]);\r\n  //viết hàm tìm trong giỏ hàng có sản phẩm chưa\r\n  const findItem = (id) => {\r\n    return items.findIndex((item) => item.id === id);\r\n  };\r\n  const addItem = (item) => {\r\n    setItem((preItem) => {\r\n      console.log(items);\r\n      if (findItem(item.id) < 0) {\r\n        preItem.push(item);\r\n        return [...preItem];\r\n      } else {\r\n        preItem[findItem(item.id)].amount =\r\n          preItem[findItem(item.id)].amount + item.amount;\r\n        return [...preItem];\r\n      }\r\n    });\r\n  };\r\n  //tính tổng tiền\r\n  let totalAmount = +0;\r\n  for (let i = 0; i < items.length; i++) {\r\n    let tong = items[i].amount * items[i].price;\r\n\r\n    totalAmount = tong;\r\n  }\r\n  //remove\r\n  const removeItem = (itemID) => {\r\n    setItem((preItem) => {\r\n      preItem[findItem(itemID)].amount -= 1;\r\n      if (preItem[findItem(itemID)].amount === 0) {\r\n        preItem = preItem.filter((item) => {\r\n          return item.id !== preItem[findItem(itemID)].id;\r\n        });\r\n      }\r\n      return [...preItem];\r\n    });\r\n  };\r\n  return (\r\n    <ContextCart.Provider\r\n      value={{\r\n        items: items,\r\n        totalAmount: totalAmount,\r\n        addItem: addItem,\r\n        removeItem: removeItem,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ContextCart.Provider>\r\n  );\r\n};\r\nexport default ContextCartProvice;\r\n\r\n///cách này dùng reducer\r\n// import { useReducer } from \"react\";\r\n\r\n// import ContextCart from \"./ContextCart\";\r\n\r\n// const defaultCartState = {\r\n//   items: [],\r\n//   totalAmount: 0,\r\n// };\r\n\r\n// const cartReducer = (state, action) => {\r\n//   if (action.type === \"ADD\") {\r\n//     const updatedTotalAmount =\r\n//       state.totalAmount + action.item.price * action.item.amount;\r\n\r\n//     const existingCartItemIndex = state.items.findIndex(\r\n//       (item) => item.id === action.item.id,\r\n//     );\r\n//     const existingCartItem = state.items[existingCartItemIndex];\r\n//     let updatedItems;\r\n\r\n//     if (existingCartItem) {\r\n//       const updatedItem = {\r\n//         ...existingCartItem,\r\n//         amount: existingCartItem.amount + action.item.amount,\r\n//       };\r\n//       updatedItems = [...state.items];\r\n//       updatedItems[existingCartItemIndex] = updatedItem;\r\n//     } else {\r\n//       updatedItems = state.items.concat(action.item);\r\n//     }\r\n\r\n//     return {\r\n//       items: updatedItems,\r\n//       totalAmount: updatedTotalAmount,\r\n//     };\r\n//   }\r\n//   if (action.type === \"REMOVE\") {\r\n//     const existingCartItemIndex = state.items.findIndex(\r\n//       (item) => item.id === action.id,\r\n//     );\r\n//     const existingItem = state.items[existingCartItemIndex];\r\n//     const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n//     let updatedItems;\r\n//     if (existingItem.amount === 1) {\r\n//       updatedItems = state.items.filter((item) => item.id !== action.id);\r\n//     } else {\r\n//       const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\r\n//       updatedItems = [...state.items];\r\n//       updatedItems[existingCartItemIndex] = updatedItem;\r\n//     }\r\n\r\n//     return {\r\n//       items: updatedItems,\r\n//       totalAmount: updatedTotalAmount,\r\n//     };\r\n//   }\r\n\r\n//   return defaultCartState;\r\n// };\r\n\r\n// const CartProvider = (props) => {\r\n//   const [cartState, dispatchCartAction] = useReducer(\r\n//     cartReducer,\r\n//     defaultCartState,\r\n//   );\r\n\r\n//   const addItemToCartHandler = (item) => {\r\n//     dispatchCartAction({ type: \"ADD\", item: item });\r\n//   };\r\n\r\n//   const removeItemFromCartHandler = (id) => {\r\n//     dispatchCartAction({ type: \"REMOVE\", id: id });\r\n//   };\r\n\r\n//   const cartContext = {\r\n//     items: cartState.items,\r\n//     totalAmount: cartState.totalAmount,\r\n//     addItem: addItemToCartHandler,\r\n//     removeItem: removeItemFromCartHandler,\r\n//   };\r\n\r\n//   return (\r\n//     <ContextCart.Provider value={cartContext}>\r\n//       {props.children}\r\n//     </ContextCart.Provider>\r\n//   );\r\n// };\r\n\r\n// export default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}